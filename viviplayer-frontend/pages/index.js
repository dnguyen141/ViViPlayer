import React, { useEffect } from 'react';
import Head from 'next/head';
import Router from 'next/router';
import { Form, Input, Tabs, Button, Checkbox } from 'antd';
import NumberOutlined from '@ant-design/icons/NumberOutlined';
import { login, loadUser, register } from '../actions/auth.action';
import { connect } from 'react-redux';
import { setAuthToken } from '../utils/setAuthToken';

const { TabPane } = Tabs;
const Home = ({ isAuthenticated, login, loadUser, user, register }) => {
  useEffect(() => {
    // check for token in LS when app first runs
    if (localStorage.token) {
      // if there is a token set axios headers for all requests
      setAuthToken(localStorage.token);
    }
    // try to fetch a user, if no token or invalid token we
    // will get a 401 response from our API
    loadUser();

    // log user out from all tabs if they log out in one tab
    // window.addEventListener('storage', () => {
    //   if (!localStorage.token) {
    //     type: LOGOUT;
    //   }
    // });
  }, [login, user]);
  if (user) {
    if (user.is_mod == true) {
      Router.push('/dashboard');
    } else {
      Router.push('/video');
    }
  }

  const registerMod = async ({ username, password1, password2 }) => {
    register(username.trim(), password1.trim(), password2.trim());
  };

  const onFinish = async ({ username, password }) => {
    await login(username.trim(), password.trim());
  };

  const loginWithTan = (values) => {
    console.log('TAN VALUES', values.tan);
    // if (values.tan !== '112021') {
    //   console.log('run here');
    //   Notification('Login', 'TAN is not correct!');
    // } else {
    //   Router.push('/dashboard');
    // }
  };

  const onFinishFailed = (errorInfo) => {
    console.log('Failed:', errorInfo);
  };
  function callback(key) {
    console.log(key);
  }
  return (
    <div>
      <Head>
        <title>Viviplayer 3 - Login</title>
        <meta name="description" content="Generated by Viviplayer3 Team" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="bg-image"></div>

      <div className="bg-text">
        <Tabs defaultActiveKey="1" onChange={callback} className="text-white">
          <TabPane tab="TAN Einloggen" key="1">
            <Form name="TAN Login" onFinish={loginWithTan} autoComplete="off">
              <Form.Item style={{ marginBottom: '1em' }} name="tan">
                <Input prefix={<NumberOutlined />} placeholder="TAN" />
              </Form.Item>
              <Button type="primary" htmlType="submit">
                Submit
              </Button>
            </Form>
          </TabPane>
          <TabPane tab="Als Moderator Einloggen" key="2">
            <Form
              name="loginForm"
              labelCol={{
                span: 5
              }}
              wrapperCol={{
                span: 17
              }}
              initialValues={{
                remember: true
              }}
              onFinish={onFinish}
              onFinishFailed={onFinishFailed}
              autoComplete="off"
            >
              <Form.Item className="form-login-label" label="Username" name="username">
                <Input />
              </Form.Item>

              <Form.Item className="form-login-label" label="Password" name="password">
                <Input.Password />
              </Form.Item>
              <Form.Item
                name="remember"
                valuePropName="checked"
                wrapperCol={{
                  offset: 5,
                  span: 16
                }}
              >
                <Checkbox className="text-white">Remember me</Checkbox>
              </Form.Item>

              <Form.Item
                wrapperCol={{
                  offset: 5,
                  span: 16
                }}
              >
                <Button type="primary" htmlType="submit">
                  Submit
                </Button>
              </Form.Item>
            </Form>
          </TabPane>
          <TabPane tab="Als Moderator Registrieren" key="3">
            <Form
              name="registerForm"
              labelCol={{
                span: 5
              }}
              wrapperCol={{
                span: 17
              }}
              onFinish={registerMod}
              onFinishFailed={onFinishFailed}
              autoComplete="off"
            >
              <Form.Item className="form-login-label" label="Benutzername" name="username">
                <Input />
              </Form.Item>

              <Form.Item
                className="form-login-label"
                name="password1"
                label="Kennwort"
                rules={[
                  {
                    required: true,
                    message: 'Bitte geben Sie Ihr Kennwort ein.'
                  }
                ]}
                hasFeedback
              >
                <Input.Password />
              </Form.Item>
              <Form.Item
                className="form-login-label"
                name="password2"
                label="Kennwort bestätigen"
                dependencies={['password1']}
                hasFeedback
                rules={[
                  {
                    required: true,
                    message: 'Bitte bestätigen Sie Ihr Kennwort!'
                  },
                  ({ getFieldValue }) => ({
                    validator(_, value) {
                      if (!value || getFieldValue('password1') === value) {
                        return Promise.resolve();
                      }
                      return Promise.reject(new Error('Die Kennwörter übereinstimmen nicht!'));
                    }
                  })
                ]}
              >
                <Input.Password />
              </Form.Item>
              <Form.Item
                wrapperCol={{
                  offset: 5,
                  span: 16
                }}
              >
                <Button type="primary" htmlType="submit">
                  Registrieren
                </Button>
              </Form.Item>
            </Form>
          </TabPane>
        </Tabs>
      </div>
    </div>
  );
};
const mapStateToProps = (state) => ({
  isAuthenticated: state.auth.isAuthenticated,
  user: state.auth.user
});

export default connect(mapStateToProps, { login, loadUser, register })(Home);
